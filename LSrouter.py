####################################################
# LSrouter.py
# Name:
# HUID:
#####################################################

from router import Router
import heapq
from packet import Packet
import time
import json


class LSrouter(Router):
    """Link state routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeat_time):
        Router.__init__(self, addr)
        self.heartbeat_time = heartbeat_time
        self.last_time = 0
        self.seq_num = 0
        self.neighbors = {}  # {port: (neighbor, cost)}
        self.link_state_db = {}  # {router_addr: (seq_num, [(neighbor, cost), ...])}
        self.forwarding_table = {}  # {dest: port}


    def handle_packet(self, port, packet):
        """Process incoming packet."""
        # TODO
        if packet.is_traceroute:
            # Hint: this is a normal data packet
            # If the forwarding table contains packet.dst_addr
            #   send packet based on forwarding table, e.g., self.send(port, packet)
            pass
        else:
            # Hint: this is a routing packet generated by your routing protocol
            # If the sequence number is higher and the received link state is different
            #   update the local copy of the link state
            #   update the forwarding table
            #   broadcast the packet to other neighbors
            pass

    def handle_new_link(self, port, endpoint, cost):
        self.neighbors[port] = (endpoint, cost)
        self.seq_num += 1
        self.link_state_db[self.addr] = (
            self.seq_num,
            [(ep, c) for _, (ep, c) in self.neighbors.items()]
        )
        print(f"[DEBUG] {self.addr} thêm link tới {endpoint} với cost {cost}")
        self.flood()
        self.recompute_paths()

    def handle_remove_link(self, port):
        if port in self.neighbors:
            del self.neighbors[port]
            self.seq_num += 1
            self.link_state_db[self.addr] = (
                self.seq_num,
                [(ep, c) for _, (ep, c) in self.neighbors.items()]
            )
            print(f"[DEBUG] {self.addr} xóa link trên port {port}")
            self.flood()
            self.recompute_paths()

    def handle_time(self, time_ms):
        if time_ms - self.last_time >= self.heartbeat_time:
            self.last_time = time_ms
            self.flood()

    def __repr__(self):
        """Representation for debugging in the network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return f"LSrouter(addr={self.addr})"
